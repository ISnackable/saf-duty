'use client';

import { IconBrandAndroid, IconBrandAppleFilled } from '@tabler/icons-react';
import type { AddToCalendarActionType } from 'add-to-calendar-button-react';
import { format, isFuture, isPast } from 'date-fns';
import Image from 'next/image';
import Link from 'next/link';
import * as React from 'react';

import { Icons } from '@/components/icons';
import { useUser } from '@/components/session-provider';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { type CarouselApi } from '@/components/ui/carousel';
import {
  Carousel,
  CarouselContent,
  CarouselDots,
  CarouselItem,
} from '@/components/ui/carousel';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import useAllProfiles from '@/hooks/use-all-profiles';
import { useMediaQuery } from '@/hooks/use-media-query';
import { useOs } from '@/hooks/use-os';
import { useUpcomingDuties } from '@/hooks/use-upcoming-duties';
import { host } from '@/lib/config';
import svgImage from '@/public/undraw_happy_music_g6wc.svg';
import { getOrdinalSuffix } from '@/utils/helper';

export function DashboardOverview() {
  const os = useOs();
  const user = useUser();
  const { data: profiles } = useAllProfiles();
  const { data: upcomingDuties } = useUpcomingDuties();
  const [indexOfUpcomingDate, setIndexOfUpcomingDate] = React.useState(0);
  const [api, setApi] = React.useState<CarouselApi>();
  const isMediumScreen = useMediaQuery('(min-width: 768px)');
  const isLargeScreen = useMediaQuery('(min-width: 1024px)');

  const profile = React.useMemo(
    () => profiles?.find((profile) => profile.id === user?.id),
    [profiles, user]
  );

  const onClickAddToCalendar = async () => {
    if (!upcomingDuties) return;

    const { atcb_action } = await import('add-to-calendar-button-react');

    const calendarConfig: AddToCalendarActionType = {
      uid: '8b799eef-a589-497e-8c52-2046d2657d87',
      name: '[Reminder] Duty Roster',
      hideBranding: true,
      lightMode: 'bodyScheme',
      styleLight: '--modal-text-align: center',
      styleDark: '--modal-text-align: center',
      options: [os === 'ios' || os === 'macos' ? 'Apple' : 'Google'],
      dates: upcomingDuties.map((roster) => ({
        uid: `8b799eef-a589-497e-8c52-2046d2657d87-${roster.id}`,
        name: `SAF Duty`,
        description: `You have a duty on ${roster.duty_date} at 8am. Please be on time! This was automatically generated by the SAF Duty Roster at [url]${host}[/url].`,
        startDate: roster.duty_date,
      })),
      customLabels: {
        'modal.multidate.h': 'Google Calendar',
        'modal.multidate.text': 'Click on the dates to add to your calendar',
      },
    };

    // Trigger the Add to Calendar Button
    atcb_action(calendarConfig);
  };

  React.useEffect(() => {
    if (!api || !upcomingDuties) {
      return;
    }

    const index = upcomingDuties.findIndex((roster) => {
      return isFuture(roster.duty_date);
    });
    setIndexOfUpcomingDate(index);

    if (isLargeScreen) {
      api.scrollTo(Math.floor(index / 3));
    } else if (isMediumScreen) {
      api.scrollTo(Math.floor(index / 2));
    } else {
      api.scrollTo(index);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [api, upcomingDuties]);

  return (
    <>
      <div data-tour='home-page'>
        <div className='flex w-full items-center space-y-2'>
          <Avatar className='mr-3 inline-block h-10 w-10 items-center align-middle'>
            <AvatarImage
              src={profile?.avatar_url ?? ''}
              className='object-cover'
            />
            <AvatarFallback>O</AvatarFallback>
          </Avatar>
          <h1 className='grow scroll-m-20 border-b pb-2 text-2xl font-extrabold tracking-tight sm:text-4xl lg:text-5xl'>
            Howdy, {profile?.name ?? ''}
          </h1>
        </div>
        <p className='text-sm leading-7 sm:text-base [&:not(:first-child)]:mt-6'>
          Review your upcoming duties and add them to your calendar. See who are
          on duty with you and get in touch with them.
        </p>
      </div>

      <div className='space-y-4'>
        <div>
          <div className='mb-2 flex scroll-m-20 justify-between'>
            <h4 className='text-xl font-semibold tracking-tight'>
              Upcoming duties
            </h4>

            <Link
              href='/duty-roster'
              className='self-end font-light text-muted-foreground'
            >
              View all âž¤
            </Link>
          </div>

          {upcomingDuties && upcomingDuties?.length > 0 ? (
            <>
              <Carousel
                className='relative grid w-full'
                setApi={setApi}
                opts={{
                  loop: true,
                  align: 'start',
                  slidesToScroll: 'auto',
                }}
              >
                <CarouselContent>
                  {upcomingDuties.map((roster, index) => (
                    <CarouselItem
                      key={roster.id}
                      className={
                        upcomingDuties.length !== 1
                          ? 'basis-5/6 md:basis-1/2 lg:basis-1/3'
                          : 'basis-full'
                      }
                    >
                      <div className='p-1'>
                        <Card>
                          <CardContent className='flex h-[280px] flex-col justify-between p-6'>
                            <div>
                              <div className='text-4xl font-bold'>
                                {format(new Date(roster.duty_date), 'd MMM')}
                              </div>
                              <div className='flex items-center align-middle text-sm font-semibold text-muted-foreground'>
                                <Icons.clock className='mr-1 size-4' />
                                {format(new Date(roster.duty_date), 'iii')} 8:00
                                AM
                              </div>
                              <div className='text-xs font-semibold text-muted-foreground text-red-600'>
                                {roster.is_extra && 'ðŸŒš [Extra]'}
                              </div>
                            </div>
                            <Badge variant='secondary' className='w-fit'>
                              Your {getOrdinalSuffix(index + 1)} duty{' '}
                              {isPast(new Date(roster.duty_date))
                                ? ' âœ…'
                                : undefined}
                            </Badge>
                          </CardContent>
                        </Card>
                      </div>
                    </CarouselItem>
                  ))}
                </CarouselContent>
                <CarouselDots
                  dotsClassName='bg-primary w-4 h-1'
                  className='absolute bottom-4 left-0 right-0 z-10 my-0 flex h-1 flex-row justify-center'
                  gap='lg'
                />
              </Carousel>
              <Button
                variant='outline'
                onClick={onClickAddToCalendar}
                className='ml-auto mr-auto mt-4 flex items-center rounded-full align-middle'
              >
                {os === 'ios' || os === 'macos' ? (
                  <IconBrandAppleFilled className='mr-1' />
                ) : (
                  <IconBrandAndroid className='mr-1' />
                )}
                Add to Calendar
              </Button>
            </>
          ) : (
            <div className='relative flex h-[342px] flex-col items-center justify-center'>
              <Image
                priority
                src={svgImage}
                alt='Undraw personal information logo'
                className='h-48 object-contain sm:h-52'
              />
              <p className='pt-8 text-xl text-muted-foreground'>
                No upcoming duties
              </p>
            </div>
          )}
        </div>

        <Separator />

        <div>
          <div className='mb-2 flex scroll-m-20 justify-between'>
            <h4 className='text-xl font-semibold tracking-tight'>
              Duties completed
            </h4>

            <p className='text-muted-foreground'>
              {' '}
              {indexOfUpcomingDate === -1
                ? upcomingDuties?.length
                : indexOfUpcomingDate}{' '}
              of {upcomingDuties?.length || 0}
            </p>
          </div>

          <Progress
            value={
              upcomingDuties && upcomingDuties.length > 0
                ? indexOfUpcomingDate === -1
                  ? 100
                  : (indexOfUpcomingDate / upcomingDuties.length) * 100
                : 0
            }
            className='w-full'
          />
        </div>

        <Separator />

        <div>
          <h4 className='mb-2 scroll-m-20 text-xl font-semibold tracking-tight'>
            Also on duty
          </h4>
          <Carousel
            className='relative !m-0 grid w-full'
            opts={{
              align: 'start',
              dragFree: true,
            }}
          >
            <CarouselContent>
              {profiles && profiles.length > 0
                ? profiles.map((profile) => (
                    <CarouselItem
                      key={profile.id}
                      className='flex basis-[21%] flex-col items-center justify-center border-none p-4 sm:basis-[11%]'
                    >
                      <Avatar>
                        <AvatarImage
                          className='rounded-xl object-cover'
                          src={profile.avatar_url || undefined}
                        />
                        <AvatarFallback>CN</AvatarFallback>
                      </Avatar>
                      <p className='py-2 text-center text-sm font-medium leading-none'>
                        {profile.name}
                      </p>
                    </CarouselItem>
                  ))
                : Array.from({ length: 8 }).map((_, index) => (
                    <CarouselItem
                      key={index}
                      className='flex basis-[21%] flex-col items-center justify-center border-none p-2 sm:basis-[11%]'
                    >
                      <Skeleton className='h-12 w-12 rounded-full' />

                      <Skeleton className='mt-2 h-3 w-12' />
                    </CarouselItem>
                  ))}
            </CarouselContent>
          </Carousel>
        </div>
      </div>
    </>
  );
}
