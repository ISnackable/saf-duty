import type { GetServerSidePropsContext } from 'next'
import Image from 'next/image'
import {
  Container,
  createStyles,
  Divider,
  Text,
  Title,
  Timeline,
  useMantineTheme,
  Box,
  Group,
  Flex,
  Grid,
  ThemeIcon,
} from '@mantine/core'
import { getServerSession } from 'next-auth/next'
import { IconEdit, IconBellRingingFilled } from '@tabler/icons-react'
import { AddToCalendarButton } from 'add-to-calendar-button-react'
import dayjs from 'dayjs'

import type { UpcomingDuties } from '@/lib/sanity.queries'
import { getUserUpcomingDuties } from '@/lib/sanity.client'
import { authOptions } from './api/auth/[...nextauth]'
import * as demo from '@/lib/demo.data'
import config from '@/../site.config'
import svgImage from '@/public/undraw_online_organizer_re_156n.svg'
import { useEffect, useState } from 'react'

const useStyles = createStyles((theme) => ({
  title: {
    fontFamily: `Greycliff CF, ${theme.fontFamily}`,
    color: theme.colorScheme === 'dark' ? theme.white : theme.black,
    lineHeight: 1,
    textTransform: 'uppercase',
  },

  titleWrapper: {
    display: 'flex',
    alignItems: 'center',
    '& > *:not(:last-child)': {
      marginRight: theme.spacing.sm,
    },
  },
}))

UpcomingDutiesPage.title = 'Upcoming Duties'

export default function UpcomingDutiesPage({ upcomingDuties }: { upcomingDuties: UpcomingDuties }) {
  const { classes } = useStyles()
  const { colorScheme } = useMantineTheme()

  const [indexOfUpcomingDate, setIndexOfUpcomingDate] = useState(0)

  const calendarDates = upcomingDuties.map((date) => ({
    name: 'SAF Duty',
    description: `You have a duty on ${date} at 8am, please be on time! This was automatically generated by the SAF Duty Roster.`,
    startDate: date,
  }))

  useEffect(() => {
    setIndexOfUpcomingDate(
      upcomingDuties.findIndex((date) => {
        const dutyDate = new Date(date)
        const today = new Date()

        return dutyDate.valueOf() > today.valueOf()
      })
    )
  }, [upcomingDuties])

  return (
    <Container my="xl">
      <div className={classes.titleWrapper}>
        <IconEdit size={48} />
        <Title className={classes.title}>Upcoming Duties</Title>
      </div>

      <Text color="dimmed" mt="md">
        View the list of upcoming duties you have been assigned to. This list was generated from the
        duty roster. Easier to keep track your duties on the go! You can also add the list of
        upcoming duties to your calendar.
      </Text>
      <Divider mt="sm" />

      <Grid gutter="xl" mt="xl">
        <Grid.Col md={12} lg={upcomingDuties.length > 0 ? 8 : 12}>
          <div style={{ position: 'relative', height: '40vh' }}>
            <Image
              priority
              src={svgImage}
              fill={true}
              alt="Undraw personal information logo"
              style={{ objectFit: 'fill' }}
            />
          </div>
        </Grid.Col>
        <Grid.Col span={upcomingDuties.length > 0 ? 'auto' : 12}>
          {upcomingDuties.length > 0 ? (
            <Timeline active={indexOfUpcomingDate} bulletSize={24} lineWidth={2} mt="xl">
              {upcomingDuties.map((date, index) => {
                const duration = dayjs(date).diff(new Date(), 'day')

                return (
                  <Timeline.Item
                    key={date}
                    title={dayjs(date).format('D MMMM, dddd')}
                    bullet={
                      index === indexOfUpcomingDate && (
                        <ThemeIcon
                          size={22}
                          variant="gradient"
                          gradient={{ from: 'lime', to: 'yellow' }}
                          radius="xl"
                        >
                          <IconBellRingingFilled size="0.8rem" />
                        </ThemeIcon>
                      )
                    }
                  >
                    <Text color="dimmed" size="sm">
                      8:00 AM
                    </Text>
                    <Text size="xs" mt={4}>
                      {Math.abs(duration)} days {duration < 0 ? 'ago' : 'ahead'}
                    </Text>
                  </Timeline.Item>
                )
              })}
            </Timeline>
          ) : (
            <Box mt="xl">
              <Flex align="center" justify="center">
                <Text size="xl" color="dimmed">
                  No upcoming duties
                </Text>
              </Flex>
            </Box>
          )}
        </Grid.Col>
      </Grid>

      {upcomingDuties.length > 0 && (
        <Group mt="lg" position="center">
          <AddToCalendarButton
            name="Duty Roster"
            dates={calendarDates}
            hideCheckmark
            hideBackground
            buttonStyle="round"
            trigger="click"
            options={['Apple', 'Google']}
            lightMode={colorScheme}
            atcb-button-id="atcb-btn-1"
            atcb-last-event="initialization:atcb-btn-1"
            // @ts-expect-error Warning: Extra attributes from the server: class
            class={`atcb atcb-${colorScheme}`}
          />
        </Group>
      )}
    </Container>
  )
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions)

  if (!session) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }

  const { user } = session
  let upcomingDuties = demo.upcomingDuties
  if (user?.id !== config.demoUserId) {
    upcomingDuties = await getUserUpcomingDuties(user?.id)
  }

  return {
    props: { upcomingDuties },
  }
}
