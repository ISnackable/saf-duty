import Image from 'next/image'
import dynamic from 'next/dynamic'
import {
  Container,
  createStyles,
  Divider,
  Text,
  Title,
  Timeline,
  useMantineTheme,
  Box,
  Group,
  Flex,
  LoadingOverlay,
  ThemeIcon,
  Paper,
  rem,
  Progress,
  Button,
  Avatar,
  ColorSwatch,
  Stack,
  SimpleGrid,
} from '@mantine/core'
import { Carousel } from '@mantine/carousel'
import { IconEdit, IconBellRingingFilled } from '@tabler/icons-react'
import dayjs from 'dayjs'

import { useEffect, useState } from 'react'
import useUpcomingDuties from '@/hooks/useUpcomingDuties'
import { useSession } from 'next-auth/react'

const useStyles = createStyles((theme) => ({
  title: {
    fontFamily: `Greycliff CF, ${theme.fontFamily}`,
    color: theme.colorScheme === 'dark' ? theme.white : theme.black,
    lineHeight: 1,
  },

  titleWrapper: {
    display: 'flex',
    alignItems: 'center',
    '& > *:not(:last-child)': {
      marginRight: theme.spacing.sm,
    },
  },

  card: {
    height: rem(280),
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
  },

  cardTitle: {
    fontFamily: `Greycliff CF, ${theme.fontFamily}`,
    fontWeight: 900,
    color: theme.colorScheme === 'dark' ? theme.white : theme.black,
    lineHeight: 1.2,
    fontSize: rem(32),
  },

  cardTime: {
    color: theme.colorScheme === 'dark' ? theme.white : theme.black,
    opacity: 0.7,
    fontWeight: 700,
    textTransform: 'uppercase',
    marginTop: theme.spacing.xs,
  },
}))

const AddToCalendarButton = dynamic(
  () => import('add-to-calendar-button-react').then((mod) => mod.AddToCalendarButton),
  {
    ssr: false,
  }
)

interface CardProps {
  title: string
  time: string
}

function Card({ title, time }: CardProps) {
  const { classes } = useStyles()

  return (
    <Paper
      shadow="md"
      p="xl"
      radius="md"
      // sx={{ background: getRandomGraidentStyle() }}
      className={classes.card}
    >
      <div>
        <Title order={3} className={classes.cardTitle}>
          {title}
        </Title>
        <Text className={classes.cardTime} size="xs">
          {time}
        </Text>
      </div>
      <Stack justify="flex-end" spacing="xs">
        <Title order={3}> Standby</Title>
        <Text size="md">Some other person</Text>
      </Stack>
    </Paper>
  )
}

UpcomingDutiesPage.title = 'Upcoming Duties'

export default function UpcomingDutiesPage() {
  const { data: session } = useSession()
  const { data: upcomingDuties, isLoading, error } = useUpcomingDuties()

  const { classes } = useStyles()
  const { colorScheme } = useMantineTheme()

  const calendarDates = upcomingDuties?.map((date) => ({
    name: 'SAF Duty',
    description: `You have a duty on ${date} at 8am, please be on time! This was automatically generated by the SAF Duty Roster.`,
    startDate: date,
  }))

  const data =
    upcomingDuties?.map((date) => ({
      title: dayjs(date).format('D MMM'),
      time: `${dayjs(date).format('ddd')} 8:00 AM`,
    })) || []

  const slides = data.map((item) => (
    <Carousel.Slide key={item.title}>
      <Card {...item} />
    </Carousel.Slide>
  ))

  // const [indexOfUpcomingDate, setIndexOfUpcomingDate] = useState(0)

  // useEffect(() => {
  //   setIndexOfUpcomingDate(
  //     upcomingDuties?.findIndex((date) => {
  //       const dutyDate = new Date(date)
  //       const today = new Date()

  //       return dutyDate.valueOf() > today.valueOf()
  //     }) || 0
  //   )
  // }, [upcomingDuties])

  if (error) {
    return (
      <Container my="xl">
        <Text size="xl" color="red">
          {error.message}
        </Text>
      </Container>
    )
  }

  return (
    <Container my="xl">
      <div className={classes.titleWrapper}>
        <Avatar src={session?.user?.image} radius="xl" />
        <Title className={classes.title}>Howdy, {session?.user?.name}</Title>
      </div>

      <Text color="dimmed" mt="md">
        Review your upcoming duties and add them to your calendar.
      </Text>
      <Divider my="sm" />

      <Box pos="relative">
        {isLoading && <LoadingOverlay visible={isLoading} overlayBlur={2} />}
        {upcomingDuties && upcomingDuties?.length > 0 ? (
          <Carousel
            loop
            withControls={false}
            withIndicators
            slideSize="50%"
            breakpoints={[{ maxWidth: 'sm', slideSize: '80%', slideGap: 'sm' }]}
            slideGap="xl"
            align="start"
            styles={{
              indicator: {
                width: rem(12),
                height: rem(4),
                transition: 'width 250ms ease',

                '&[data-active]': {
                  width: rem(40),
                },
              },
            }}
          >
            {slides}
          </Carousel>
        ) : (
          <Box mt="xl">
            <Flex align="center" justify="center">
              <Text size="xl" color="dimmed">
                No upcoming duties
              </Text>
            </Flex>
          </Box>
        )}
        <Divider my="sm" />
        Duties Completed 1 of 4
        <Progress mb="xl" value={50} />
        <Divider my="sm" />
        Duties Stats: duties worked this month: 4 duties worked this year: 12 duties worked total:
        24
        <SimpleGrid
          cols={4}
          breakpoints={[
            { maxWidth: 'md', cols: 2 },
            { maxWidth: 'xs', cols: 1 },
          ]}
        >
          <Paper>
            <Text>Month</Text>
          </Paper>
          <Paper>
            <Text>Month</Text>
          </Paper>
          <Paper>
            <Text>Month</Text>
          </Paper>
          <Paper>
            <Text>Month</Text>
          </Paper>
        </SimpleGrid>
        <Divider my="sm" />
        Also working:
        <Carousel slideSize="10%" align="start" withControls={false} dragFree>
          <Carousel.Slide>
            <Avatar src={session?.user?.image} radius="xl" />
            {session?.user?.name}1
          </Carousel.Slide>
          <Carousel.Slide>
            <Avatar src={session?.user?.image} radius="xl" />
            {session?.user?.name}2
          </Carousel.Slide>
          <Carousel.Slide>
            <Avatar src={session?.user?.image} radius="xl" />
            {session?.user?.name}3
          </Carousel.Slide>
          <Carousel.Slide>
            <Avatar src={session?.user?.image} radius="xl" />
            {session?.user?.name}4
          </Carousel.Slide>
          <Carousel.Slide>
            <Avatar src={session?.user?.image} radius="xl" />
            {session?.user?.name}5
          </Carousel.Slide>
        </Carousel>
        {upcomingDuties && upcomingDuties?.length > 0 && (
          <Group mt="lg" position="center">
            <AddToCalendarButton
              name="Duty Roster"
              dates={calendarDates}
              hideCheckmark
              hideBackground
              buttonStyle="round"
              trigger="click"
              options={['Apple', 'Google']}
              lightMode={colorScheme}
              atcb-button-id="atcb-btn-1"
              atcb-last-event="initialization:atcb-btn-1"
              // @ts-expect-error Warning: Extra attributes from the server: class
              class={`atcb atcb-${colorScheme}`}
            />
          </Group>
        )}
        <Button mt="xl" color="primary" fullWidth>
          Add to Calendar
        </Button>
      </Box>
    </Container>
  )
}
